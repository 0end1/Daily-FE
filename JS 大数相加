## JS实现大数相加

js能表达的最大数是Number.MAX_VALUE，即 1.7976931348623157e+308，这个数值虽然能够表示出来，但存在一个精度问题。比如:
```
var num1 = 10000000000000000000000000 + 11111111111111111111111111
var num2 = 21111111111111111111111000
console.log(num1 === num2) //true
```
按照正常的逻辑，num1和num2是不可能相等的。但是由于JS可以精确到个位数的最大整数是9007199254740992，即2^53，所以大于这个数值的数值是没有办法进行精确计算的。
我们再来看个例子：
```
Math.pow(2,53) // 9007199254740992
Math.pow(2, 53) + 1 // 9007199254740992
```
实际上JS会丢弃大于9007199254740992后的位数，导致精度丢失。借用一张图，我们来看看JS中的一系列上限下限：

![1468042984788341](https://user-images.githubusercontent.com/21993931/53705904-9809b180-3e62-11e9-9a98-b825c216fd03.png)

为了避免精度丢失或实现大数相加，解决方法的思路就是把Num类型转换成Str的形式来相加，以下是其中的一种实现方式：
```
function add(a,b) {
    var res='', c=0;
    a = a.split('');
    b = b.split('');
    while (a.length || b.length || c){
        c += ~~a.pop() + ~~b.pop(); // 如果你需要将一个参数转化为 32 位有符号整数，那么 ~~ 将是最简便的方式。不过要切记，它会损失精度，包括小数和整数部分。
        res = c % 10 + res;
        c = c>9;
    };
    return res.replace(/^0+/,'');
};
```